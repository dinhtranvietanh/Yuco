{"ast":null,"code":"import { APPTYPES } from './appTypes';\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { uploadImage } from '../../utils/uploadImage';\nimport { notification } from 'antd';\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  GET_POST: \"GET_POST\"\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    const {\n      data\n    } = await getDataAPI('getPosts', auth.token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: APPTYPES.NOTIFY,\n      payload: {\n        error: error.response.data.msg\n      }\n    });\n  }\n};\nexport const createPost = _ref => {\n  let {\n    post,\n    images,\n    auth\n  } = _ref;\n  return async dispatch => {\n    let media = [];\n\n    try {\n      if (images.length > 0) media = await uploadImage(images);\n      const res = await postDataAPI('createPost', { ...post,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: res.data.data\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n};\nexport const updatePost = _ref2 => {\n  let {\n    postData,\n    images,\n    auth,\n    post\n  } = _ref2;\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    console.log(postData, post);\n    if (post.title === postData.title && imgNewUrl.length === 0 && imgOldUrl.length === post.images.length) return;\n\n    try {\n      if (imgNewUrl.length > 0) media = await uploadImage(imgNewUrl);\n      const res = await patchDataAPI(`updatePost/${post._id}`, { ...postData,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.updatePost\n      });\n      dispatch({\n        type: APPTYPES.NOTIFY,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: APPTYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deletePost = _ref3 => {\n  let {\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    dispatch({\n      type: POST_TYPES.DELETE_POST,\n      payload: post\n    });\n\n    try {\n      deleteDataAPI(`deletePost/${post._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: APPTYPES.NOTIFY,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPost = _ref4 => {\n  let {\n    detailPostReducer,\n    id,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    if (detailPostReducer.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`getPost/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.getDetailPost\n        });\n      } catch (err) {\n        dispatch({\n          type: APPTYPES.NOTIFY,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const likePost = _ref5 => {\n  let {\n    auth,\n    post\n  } = _ref5;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`updatePost/${post._id}/like`, null, auth.token);\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.ALERT,\n        payload: {\n          error: error.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePost = _ref6 => {\n  let {\n    auth,\n    post\n  } = _ref6;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`updatePost/${post._id}/unlike`, null, auth.token);\n    } catch (error) {\n      dispatch({\n        type: ACTIONS.ALERT,\n        payload: {\n          error: error.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["APPTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","uploadImage","notification","POST_TYPES","CREATE_POST","GET_POSTS","UPDATE_POST","DELETE_POST","GET_POST","getPosts","auth","dispatch","data","token","type","payload","error","NOTIFY","response","msg","createPost","post","images","media","length","res","err","console","log","updatePost","postData","imgNewUrl","filter","img","url","imgOldUrl","title","_id","success","deletePost","getPost","detailPostReducer","id","every","getDetailPost","likePost","newPost","likes","user","ACTIONS","ALERT","unLikePost","like"],"sources":["/Users/dinhanh/Desktop/Yuco/client/src/redux/actions/postAction.js"],"sourcesContent":["\n\nimport {APPTYPES} from './appTypes'\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI  } from '../../utils/fetchData'\nimport {uploadImage} from '../../utils/uploadImage'\nimport { notification } from 'antd';\n\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  GET_POST: \"GET_POST\",\n}\n\nexport const getPosts = (auth) => async (dispatch) => {\n  try {\n    const {data} = await getDataAPI('getPosts', auth.token)\n    dispatch({ type: POST_TYPES.GET_POSTS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: APPTYPES.NOTIFY,\n      payload: {error: error.response.data.msg}\n  })  \n}\n};\n\nexport const createPost = ({ post,images, auth}) => async (dispatch) => {\n  let media = []\n  try {\n    if(images.length> 0) media = await uploadImage(images)\n    const res = await postDataAPI('createPost', {...post, images: media}, auth.token);\n    dispatch({ type: POST_TYPES.CREATE_POST, payload: res.data.data });\n\n  } catch (err) {\n    console.log(err)\n  }\n}\nexport const updatePost = ({postData, images, auth, post}) => async (dispatch) => {\n  let media = []\n  \n  const imgNewUrl = images.filter(img => !img.url)\n  const imgOldUrl = images.filter(img => img.url)\n\n  console.log(postData, post)\n\n  if(post.title === postData.title\n     && imgNewUrl.length === 0\n     && imgOldUrl.length === post.images.length \n  ) \n  return;\n\n  try {\n      if(imgNewUrl.length > 0) media = await uploadImage(imgNewUrl)\n\n      const res = await patchDataAPI(`updatePost/${post._id}`,{\n          ...postData, images: [...imgOldUrl,...media]}, auth.token);\n      \n      dispatch({ \n          type: POST_TYPES.UPDATE_POST, \n          payload: res.data.updatePost\n      })\n\n      dispatch({ \n          type: APPTYPES.NOTIFY, \n          payload: {\n              success: res.data.msg\n          } \n      });\n  } catch (err) {\n      dispatch({ \n          type: APPTYPES.NOTIFY, \n          payload: {\n              error: err.response.data.msg\n          } \n      })\n  }\n}\n\nexport const deletePost = ({post, auth}) => async (dispatch) => {\n  dispatch({type: POST_TYPES.DELETE_POST, payload: post})\n  try {\n      \n      deleteDataAPI(`deletePost/${post._id}`, auth.token)\n\n  } catch (err) {\n      dispatch({ \n          type: APPTYPES.NOTIFY, \n          payload: {\n              error: err.response.data.msg\n          } \n      })\n  }\n}\n\nexport const getPost = ({detailPostReducer, id, auth}) => async (dispatch) => {\n  if(detailPostReducer.every(post => post._id !== id)){\n      try {\n          const res = await getDataAPI(`getPost/${id}`, auth.token)\n          dispatch({ type: POST_TYPES.GET_POST, payload: res.data.getDetailPost})\n\n      } catch (err) {\n          dispatch({\n              type: APPTYPES.NOTIFY,\n              payload: {\n                  error: err.response.data.msg\n              } \n          })\n      }\n  }\n  \n}\n\nexport const likePost = ({auth, post}) => async (dispatch) => {\n  const newPost = {...post, likes: [...post.likes, auth.user]}\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost})\n\n  try {\n    await patchDataAPI(`updatePost/${post._id}/like`, null , auth.token);\n\n  } catch (error) {\n    dispatch({\n      type: ACTIONS.ALERT,\n      payload: {error: error.response.data.msg}\n  })  }\n};\n\nexport const unLikePost = ({auth, post}) => async (dispatch) => {\n  const newPost = {...post, likes: post.likes.filter(like => like._id !== auth.user._id )}\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost})\n\n  try {\n    await patchDataAPI(`updatePost/${post._id}/unlike`, null, auth.token);\n\n  } catch (error) {\n    dispatch({\n      type: ACTIONS.ALERT,\n      payload: {error: error.response.data.msg}\n  })  }\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}